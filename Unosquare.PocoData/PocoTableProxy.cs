namespace Unosquare.PocoData
{
    using Annotations;
    using System.Collections.Generic;
    using System.Data;
    using System.Threading.Tasks;

    /// <summary>
    /// Provides stronly-typed data access operations for the specified table-mapped type.
    /// </summary>
    /// <typeparam name="T">The table-mapped type.</typeparam>
    public class PocoTableProxy<T>
        where T : class, new()
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PocoTableProxy{T}"/> class.
        /// </summary>
        /// <param name="pocoDb">The associated database.</param>
        /// <param name="createIfNotExists">if set to <c>true</c> creates the backing table if it does not exist.</param>
        public PocoTableProxy(IPocoDb pocoDb, bool createIfNotExists)
        {
            PocoDb = pocoDb;
            PocoSchema.Instance.Validate<T>();

            if (createIfNotExists && !TableExists)
                CreateTable();
        }

        /// <summary>
        /// Gets the associated database container object.
        /// </summary>
        public IPocoDb PocoDb { get; }

        /// <summary>
        /// Gets a value indicating whether the associated table exists.
        /// </summary>
        public bool TableExists => PocoDb.Definition.TableExistsAsync<T>().GetAwaiter().GetResult();

        /// <summary>
        /// Gets the table metadata.
        /// </summary>
        public TableAttribute Table => PocoSchema.Instance.Table<T>();

        /// <summary>
        /// Gets the column metadata.
        /// </summary>
        public IReadOnlyList<ColumnMetadata> Columns => PocoSchema.Instance.Columns<T>();

        /// <summary>
        /// Creates the table for the associated table-mapped type.
        /// </summary>
        public void CreateTable() => PocoDb.Definition.CreateTableAsync<T>().GetAwaiter().GetResult();

        /// <summary>
        /// Deletes the table for the associated table-mapped type.
        /// </summary>
        public void DropTable() => PocoDb.Definition.DropTableAsync<T>().GetAwaiter().GetResult();

        /// <summary>
        /// Selects all table records.
        /// </summary>
        /// <returns>The table records as objects.</returns>
        public IEnumerable<T> SelectAll() => PocoDb.SelectAll<T>();

        /// <summary>
        /// Asynchronously selects all table records.
        /// </summary>
        /// <returns>The table records as objects.</returns>
        public async Task<IEnumerable<T>> SelectAllAsync() => await PocoDb.SelectAllAsync<T>().ConfigureAwait(false);

        /// <summary>
        /// Executes a reader on the specified command and returns the results as objects.
        /// </summary>
        /// <param name="command">The command.</param>
        /// <returns>The list of objects.</returns>
        public IEnumerable<T> SelectMany(IDbCommand command) => PocoDb.SelectMany<T>(command);

        /// <summary>
        /// Asynchronously executes a reader on the specified command and returns the results as objects.
        /// </summary>
        /// <param name="command">The command.</param>
        /// <returns>The list of objects.</returns>
        public async Task<IEnumerable<T>> SelectManyAsync(IDbCommand command) => await PocoDb.SelectManyAsync<T>(command).ConfigureAwait(false);

        /// <summary>
        /// Selects a single record from the table-mapped type by matching key column values.
        /// </summary>
        /// <param name="target">The target.</param>
        /// <returns>Whether the selection was matched.</returns>
        public bool SelectSingle(T target) => PocoDb.SelectSingle(target);

        /// <summary>
        /// Asynchronously selects a single record from the table-mapped type by matching key column values.
        /// </summary>
        /// <param name="target">The target.</param>
        /// <returns>Whether the selection was matched.</returns>
        public async Task<bool> SelectSingleAsync(T target) => await PocoDb.SelectSingleAsync(target).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously inserts a single object into its corresponding mapped table.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="update">if set to <c>true</c> updates all the fields after the insert in addition to the autogenerated key value.</param>
        /// <returns>The number of affected rows.</returns>
        public async Task<int> InsertAsync(T item, bool update) => await PocoDb.InsertAsync(item, update).ConfigureAwait(false);

        /// <summary>
        /// Inserts a single object into its corresponding mapped table.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="update">if set to <c>true</c> updates all the fields after the insert in addition to the autogenerated key value.</param>
        /// <returns>The number of affected rows.</returns>
        public int Insert(T item, bool update) => PocoDb.Insert(item, update);

        /// <summary>
        /// Asynchronously inserts many objects into their corresponding mapped table.
        /// </summary>
        /// <param name="items">The items to insert.</param>
        /// <param name="update">if set to <c>true</c> updates all the fields after the insert in addition to the autogenerated key value.</param>
        /// <returns>The number of affected rows.</returns>
        public async Task<int> InsertManyAsync(IEnumerable<T> items, bool update) => await PocoDb.InsertManyAsync(items, update).ConfigureAwait(false);

        /// <summary>
        /// Inserts many objects into their corresponding mapped table.
        /// </summary>
        /// <param name="items">The items to insert.</param>
        /// <param name="update">if set to <c>true</c> updates all the fields after the insert in addition to the autogenerated key value.</param>
        /// <returns>The number of affected rows.</returns>
        public int InsertMany(IEnumerable<T> items, bool update) => PocoDb.InsertMany(items, update);

        /// <summary>
        /// Asynchronously updates a single object into its corresponding mapped table.
        /// </summary>
        /// <param name="item">The item to update.</param>
        /// <returns>The number of affected rows.</returns>
        public async Task<int> UpdateAsync(T item) => await PocoDb.UpdateAsync(item).ConfigureAwait(false);

        /// <summary>
        /// Updates a single object into its corresponding mapped table.
        /// </summary>
        /// <param name="item">The item to update.</param>
        /// <returns>The number of affected rows.</returns>
        public int Update(T item) => PocoDb.Update(item);

        /// <summary>
        /// Asynchronously updates many objects in their corresponding mapped table.
        /// </summary>
        /// <param name="items">The items to update.</param>
        /// <returns>The number of affected rows.</returns>
        public async Task<int> UpdateManyAsync(IEnumerable<T> items) => await PocoDb.UpdateManyAsync(items).ConfigureAwait(false);

        /// <summary>
        /// Updates many objects in their corresponding mapped table.
        /// </summary>
        /// <param name="items">The items to update.</param>
        /// <returns>The number of affected rows.</returns>
        public int UpdateMany(IEnumerable<T> items) => PocoDb.UpdateMany(items);

        /// <summary>
        /// Asynchronously deletes the specified object.
        /// </summary>
        /// <param name="item">The object to delete.</param>
        /// <returns>The number of affected rows.</returns>
        public async Task<int> DeleteAsync(T item) => await PocoDb.DeleteAsync(item).ConfigureAwait(false);

        /// <summary>
        /// Deletes the specified object.
        /// </summary>
        /// <param name="item">The object to delete.</param>
        /// <returns>The number of affected rows.</returns>
        public int Delete(T item) => PocoDb.Delete(item);

        /// <summary>
        /// Counts all the rows in the mapped table.
        /// </summary>
        /// <returns>The number of rows in the table.</returns>
        public int CountAll() => PocoDb.CountAll(typeof(T));

        /// <summary>
        /// Asynchronously counts all the rows in the mapped table.
        /// </summary>
        /// <returns>The number of rows in the table.</returns>
        public async Task<int> CountAllAsync() => await PocoDb.CountAllAsync(typeof(T)).ConfigureAwait(false);
    }
}
